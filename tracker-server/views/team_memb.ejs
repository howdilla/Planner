<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Planner - Команда</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .sidebar {
            background: linear-gradient(to bottom, #3A3F58, #6F637E);
        }
        .widget {
            background-color: #6F637E;
            border-radius: 10px;
        }
        .task-counter {
            background-color: #3A3F58;
            color: white;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
        }
        .divider {
            height: 1px;
            background-color: rgba(255, 255, 255, 0.1);
            margin: 1rem 0;
        }
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
                position: absolute;
                z-index: 50;
                height: 100vh;
                transition: transform 0.3s ease;
            }
            .sidebar.open {
                transform: translateX(0);
            }
        }
        .priority-low {
            background: linear-gradient(90deg, #48BB78 0%, #38A169 100%);
        }
        .priority-medium {
            background: linear-gradient(90deg, #ECC94B 0%, #D69E2E 100%);
        }
        .priority-high {
            background: linear-gradient(90deg, #F56565 0%, #E53E3E 100%);
        }
        .priority-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px;
        }
        .breadcrumb-link {
            color: #DCD1E9;
            text-decoration: none;
            transition: color 0.2s;
        }
        .breadcrumb-link:hover {
            color: white;
            text-decoration: underline;
        }
        .member-card {
            transition: all 0.3s ease;
        }
        .member-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .task-list {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease;
        }
        .task-list.open {
            max-height: 500px;
        }
    </style>
</head>
<body class="bg-[#3A3F58] font-sans text-white">
    <div class="flex">
        <!-- Sidebar -->
        <aside class="sidebar w-80 h-screen fixed md:relative">
            <div class="p-4">
                <h1 class="text-2xl font-bold mb-6">Planner</h1>

                <!-- Search -->
                <div class="relative mb-8">
                    <input type="text" placeholder="Поиск..." class="w-full pl-10 pr-4 py-2 bg-[#4A4F6A] rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500">
                    <i class="fas fa-search absolute left-3 top-3 text-gray-400"></i>
                </div>

                <!-- Main Menu -->
                <nav class="mb-8">
                    <ul class="space-y-2">
                        <li><a href="/mem_tasks" class="flex items-center space-x-3 p-3 rounded-lg hover:bg-[#4A4F6A]"><i class="fas fa-tasks"></i><span>Задачи</span></a></li>
                        <li><a href="/port_memb" class="flex items-center space-x-3 p-3 rounded-lg hover:bg-[#4A4F6A]"><i class="fas fa-project-diagram"></i><span>Проекты и портфели</span></a></li>
                        <li><a href="/queue/member" class="flex items-center space-x-3 p-3 rounded-lg hover:bg-[#4A4F6A]"><i class="fas fa-stream"></i><span>Очередь</span></a></li>
                        <li><a href="/goals" class="flex items-center space-x-3 p-3 rounded-lg hover:bg-[#4A4F6A]"><i class="fas fa-bullseye"></i><span>Цели</span></a></li>
                        <li><a href="/boards" class="flex items-center space-x-3 p-3 rounded-lg hover:bg-[#4A4F6A]"><i class="fas fa-columns"></i><span>Доски задач</span></a></li>
                        <li><a href="/reports" class="flex items-center space-x-3 p-3 rounded-lg hover:bg-[#4A4F6A]"><i class="fas fa-chart-bar"></i><span>Отчеты</span></a></li>
                        <li><a href="/more" class="flex items-center space-x-3 p-3 rounded-lg hover:bg-[#4A4F6A]"><i class="fas fa-ellipsis-h"></i><span>Еще</span></a></li>
                    </ul>
                </nav>

                <div class="divider"></div>

                <!-- Team Section -->
                <div class="mb-8">
                    <a href="/team" class="w-full flex items-center space-x-3 p-3 rounded-lg bg-[#4A4F6A] text-left">
                        <i class="fas fa-users"></i><span>Команда</span>
                    </a>
                    
                </div>

                <!-- Bottom Menu -->
                <div class="absolute bottom-0 left-0 right-0 p-4">
                    <ul class="space-y-2">
                        <li><a href="/notifications" class="flex items-center space-x-3 p-3 rounded-lg hover:bg-[#4A4F6A]"><i class="fas fa-bell"></i><span>Уведомления</span></a></li>
                        <li><a href="/support" class="flex items-center space-x-3 p-3 rounded-lg hover:bg-[#4A4F6A]"><i class="fas fa-question-circle"></i><span>Поддержка</span></a></li>
                        <li><a href="/settings" class="flex items-center space-x-3 p-3 rounded-lg hover:bg-[#4A4F6A]"><i class="fas fa-cog"></i><span>Настройки</span></a></li>
                        <li><a href="/user" class="flex items-center space-x-3 p-3 rounded-lg hover:bg-[#4A4F6A]"><i class="fas fa-user-circle"></i><span class="text-lg">Учетная запись</span></a></li>
                    </ul>
                </div>
            </div>
        </aside>

        <!-- Main Content -->
        <main class="flex-1 ml-0 md:ml-80">
            <!-- Top Bar -->
            <button id="sidebarToggle" class="md:hidden p-2">
  <i class="fas fa-bars"></i>
</button>

             <div class="bg-[#4A4F6A] p-4 flex justify-between items-center">
                <h2 id="breadcrumb" class="text-xl">
                    <a href="/" class="breadcrumb-link">Моя страница</a> / <span id="current-section">Доски задач</span>
                </h2>
                <a href="/user" class="px-4 py-2 bg-[#6F637E] rounded-lg hover:bg-[#5E536D] inline-block">
    <i class="fas fa-pencil-alt mr-2"></i>
    Редактировать
</a>
            </div>

            <!-- Content Section -->
            <div class="p-6">
            <h1 class="text-2xl font-bold mb-2">Моя команда</h1>
            

            <!-- Team Members Section -->
            <div class="p-6">
                <!-- Filters -->
                <div class="flex flex-wrap gap-4 mb-6">
                    <div class="relative">
                        <select id="sortBy" class="appearance-none bg-[#4A4F6A] border border-[#6F637E] rounded-lg px-4 py-2 pr-8 focus:outline-none focus:ring-2 focus:ring-purple-500">
                            <option value="priority">Сортировать по приоритету</option>
                            <option value="name">Сортировать по имени</option>
                            <option value="tasks">Сортировать по количеству задач</option>
                        </select>
                        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </div>
                    
                    <div class="relative">
                        <select id="filterBy" class="appearance-none bg-[#4A4F6A] border border-[#6F637E] rounded-lg px-4 py-2 pr-8 focus:outline-none focus:ring-2 focus:ring-purple-500">
                            <option value="all">Все участники</option>
                            <option value="low">Низкая загруженность</option>
                            <option value="medium">Средняя загруженность</option>
                            <option value="high">Высокая загруженность</option>
                        </select>
                        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </div>
                    
                    <div class="relative flex-1 max-w-md">
                        <input type="text" id="searchMember" placeholder="Поиск участника..." class="w-full pl-10 pr-4 py-2 bg-[#4A4F6A] border border-[#6F637E] rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500">
                        <div id="userSearch" class="absolute bg-white text-black rounded shadow-md z-50 hidden"></div>
                        <i class="fas fa-search absolute left-3 top-3 text-gray-400"></i>
                    </div>
                </div>

                <!-- Team Members Grid -->
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="teamMembersContainer">
                    <!-- Team members will be dynamically inserted here -->
                </div>
            </div>
        </main>
    </div>

    <!-- Invite Modal -->
    <div id="inviteModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white text-black rounded-lg p-6 w-80 relative">
            <button onclick="closeInviteModal()" class="absolute top-2 right-2 text-gray-600 hover:text-black">
                <i class="fas fa-times"></i>
            </button>
            <h3 class="text-xl font-semibold mb-4">Пригласить пользователя</h3>
            <input type="email" id="inviteEmail" placeholder="Введите email" class="w-full p-2 border rounded mb-4 focus:outline-none focus:ring-2 focus:ring-purple-500" />
            <button onclick="sendInvite()" class="w-full bg-[#735B92] text-white p-2 rounded hover:bg-[#5f4a78]">
                Отправить приглашение
            </button>
        </div>
    </div>

    <!-- Task Details Modal -->
    <div id="taskDetailsModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-[#4A4F6A] rounded-lg p-6 w-full max-w-2xl relative max-h-[80vh] overflow-y-auto">
            <button onclick="closeTaskDetailsModal()" class="absolute top-4 right-4 text-gray-300 hover:text-white">
                <i class="fas fa-times"></i>
            </button>
            <h3 class="text-xl font-semibold mb-4" id="memberNameTitle">Задачи участника</h3>
            <div class="space-y-3" id="taskDetailsContent">
                <!-- Task details will be inserted here -->
            </div>
        </div>
    </div>

    <script>
        
         const teamMembers = <%- JSON.stringify(teamMembers) %>;

        // Mobile sidebar toggle
        document.getElementById('sidebarToggle').addEventListener('click', function () {
            document.querySelector('.sidebar').classList.toggle('open');
        });

        function openInviteModal() {
            document.getElementById('inviteModal').classList.remove('hidden');
        }

        function closeInviteModal() {
            document.getElementById('inviteModal').classList.add('hidden');
        }

        function sendInvite() {
            const email = document.getElementById('inviteEmail').value.trim();
            if (!email) {
                alert('Введите email');
                return;
            }
            
            // Here you would typically send the invite to your backend
            alert(`Приглашение отправлено на ${email}`);
            document.getElementById('inviteEmail').value = '';
            closeInviteModal();
        }

        function getPriorityClass(taskCount) {
            if (taskCount === 0) return "priority-low";
            if (taskCount <= 2) return "priority-low";
            if (taskCount <= 4) return "priority-medium";
            return "priority-high";
        }

        function getPriorityText(taskCount) {
            if (taskCount === 0) return "Свободен";
            if (taskCount <= 2) return "Низкая";
            if (taskCount <= 4) return "Средняя";
            return "Высокая";
        }

        function getPriorityIcon(taskCount) {
            if (taskCount === 0) return '<i class="fas fa-smile text-green-400"></i>';
            if (taskCount <= 2) return '<i class="fas fa-smile-beam text-green-400"></i>';
            if (taskCount <= 4) return '<i class="fas fa-meh text-yellow-400"></i>';
            return '<i class="fas fa-tired text-red-400"></i>';
        }

        function renderTeamMembers(members) {
            const container = document.getElementById('teamMembersContainer');
            container.innerHTML = '';
            
            members.forEach(member => {
                const taskCount = member.tasks.length;
                const priorityClass = getPriorityClass(taskCount);
                const priorityText = getPriorityText(taskCount);
                const priorityIcon = getPriorityIcon(taskCount);
                
                const memberCard = document.createElement('div');
                memberCard.className = `member-card bg-[#4A4F6A] rounded-lg p-4 ${priorityClass}`;
                memberCard.innerHTML = `
                    <div class="flex items-start justify-between mb-3">
                        <div class="flex items-center space-x-3">
                            <div>
                                <h3 class="font-semibold">${member.name}</h3>

                            </div>
                        </div>
                        <button onclick="deleteMember(${member.id})" class="text-gray-400 hover:text-red-400">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                    </div>
                    
                    <div class="flex items-center justify-between mb-3">
                        <div class="flex items-center">
                            <span class="priority-indicator ${priorityClass.replace('priority-', 'bg-')}"></span>
                            <span class="text-sm">${priorityText} загруженность</span>
                        </div>
                        <span class="text-sm">${priorityIcon}</span>
                    </div>
                    
                    <div class="flex items-center justify-between">
                        <div>
                            <span class="text-sm">Задач: </span>
                            <span class="font-semibold">${taskCount}</span>
                        </div>
                        <button onclick="showTasks(${member.id})" class="text-sm text-purple-300 hover:underline">
                            ${taskCount > 0 ? 'Показать задачи' : 'Нет задач'}
                        </button>
                    </div>
                    
                    <div class="task-list mt-3" id="tasks-${member.id}">
                        <!-- Tasks will be shown here when expanded -->
                    </div>
                `;
                
                container.appendChild(memberCard);
            });
        }

        function showTasks(memberId) {
            const member = teamMembers.find(m => m.id === memberId);
            const taskList = document.getElementById(`tasks-${memberId}`);
            
            if (taskList.classList.contains('open')) {
                taskList.classList.remove('open');
                taskList.innerHTML = '';
                return;
            }
            
            taskList.classList.add('open');
            
            if (member.tasks.length === 0) {
                taskList.innerHTML = '<p class="text-sm text-gray-400 italic">Нет активных задач</p>';
                return;
            }
            
            let tasksHTML = '<div class="space-y-2">';
            
            member.tasks.forEach(task => {
                let priorityColor = 'text-gray-400';
                if (task.priority === 'high') priorityColor = 'text-red-400';
                else if (task.priority === 'medium') priorityColor = 'text-yellow-400';
                else if (task.priority === 'low') priorityColor = 'text-green-400';
                
                tasksHTML += `
                    <div class="flex items-center justify-between p-2 bg-[#3A3F58] rounded">
                        <div>
                            <p class="text-sm font-medium">${task.title}</p>
                            <p class="text-xs text-gray-400">${task.project}</p>
                        </div>
                        <div class="flex items-center space-x-2">
                            <span class="text-xs ${priorityColor}">
                                <i class="fas fa-${task.priority === 'high' ? 'exclamation-circle' : task.priority === 'medium' ? 'minus-circle' : 'check-circle'}"></i>
                                ${task.priority === 'high' ? 'Высокий' : task.priority === 'medium' ? 'Средний' : 'Низкий'} приоритет
                            </span>
                            <span class="text-xs text-gray-400">${task.dueDate}</span>
                        </div>
                    </div>
                `;
            });
            
            tasksHTML += '</div>';
            taskList.innerHTML = tasksHTML;
        }

        function deleteMember(memberId) {
            if (confirm('Вы уверены, что хотите удалить этого участника из команды?')) {
                // In a real app, you would send a request to your backend to delete the member
                const index = teamMembers.findIndex(m => m.id === memberId);
                if (index !== -1) {
                    teamMembers.splice(index, 1);
                    renderTeamMembers(teamMembers);
                    alert('Участник удален из команды');
                }
            }
        }

        function openTaskDetailsModal(memberId) {
            const member = teamMembers.find(m => m.id === memberId);
            if (!member) return;
            
            document.getElementById('memberNameTitle').textContent = `Задачи ${member.name}`;
            
            const taskDetailsContent = document.getElementById('taskDetailsContent');
            taskDetailsContent.innerHTML = '';
            
            if (member.tasks.length === 0) {
                taskDetailsContent.innerHTML = '<p class="text-gray-400 italic">Нет активных задач</p>';
            } else {
                member.tasks.forEach(task => {
                    const taskElement = document.createElement('div');
                    taskElement.className = 'p-3 bg-[#3A3F58] rounded-lg';
                    taskElement.innerHTML = `
                        <div class="flex justify-between items-start">
                            <div>
                                <h4 class="font-medium">${task.title}</h4>
                                <p class="text-sm text-gray-300">${task.project}</p>
                            </div>
                            <span class="text-xs px-2 py-1 rounded ${
                                task.priority === 'high' ? 'bg-red-500' : 
                                task.priority === 'medium' ? 'bg-yellow-500' : 'bg-green-500'
                            }">
                                ${task.priority === 'high' ? 'Высокий' : task.priority === 'medium' ? 'Средний' : 'Низкий'} приоритет
                            </span>
                        </div>
                        <div class="mt-2 flex justify-between items-center">
                            <span class="text-xs text-gray-400">Срок: ${task.dueDate}</span>
                            <button class="text-xs text-purple-300 hover:underline">Подробнее</button>
                        </div>
                    `;
                    taskDetailsContent.appendChild(taskElement);
                });
            }
            
            document.getElementById('taskDetailsModal').classList.remove('hidden');
        }

        function closeTaskDetailsModal() {
            document.getElementById('taskDetailsModal').classList.add('hidden');
        }

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            renderTeamMembers(teamMembers);
            
            // Add event listeners for filters
            document.getElementById('sortBy').addEventListener('change', function() {
                const value = this.value;
                let sortedMembers = [...teamMembers];
                
                if (value === 'name') {
                    sortedMembers.sort((a, b) => a.name.localeCompare(b.name));
                } else if (value === 'tasks') {
                    sortedMembers.sort((a, b) => a.tasks.length - b.tasks.length);
                } else {
                    // Default sort by priority (task count)
                    sortedMembers.sort((a, b) => {
                        const aPriority = getPriorityClass(a.tasks.length);
                        const bPriority = getPriorityClass(b.tasks.length);
                        
                        // High priority comes first
                        if (aPriority === 'priority-high' && bPriority !== 'priority-high') return -1;
                        if (bPriority === 'priority-high' && aPriority !== 'priority-high') return 1;
                        
                        // Then medium
                        if (aPriority === 'priority-medium' && bPriority === 'priority-low') return -1;
                        if (bPriority === 'priority-medium' && aPriority === 'priority-low') return 1;
                        
                        // Then by task count
                        return b.tasks.length - a.tasks.length;
                    });
                }
                
                renderTeamMembers(sortedMembers);
            });

           document.getElementById('userSearch').addEventListener('input', async function () {
    const q = this.value.trim();
    const resultsDiv = document.getElementById('userSearchResults');

    if (q.length < 2) {
        resultsDiv.classList.add('hidden');
        resultsDiv.innerHTML = '';
        return;
    }

    try {
        const res = await fetch(`/api/search-users?q=${encodeURIComponent(q)}`);
        const users = await res.json();

        if (!users.length) {
            resultsDiv.classList.add('hidden');
            resultsDiv.innerHTML = '';
            return;
        }

        resultsDiv.classList.remove('hidden');
        resultsDiv.innerHTML = users.map(user => `
            <div class="p-2 hover:bg-gray-200 cursor-pointer" onclick="addToTeam('${user.name}', '${user.lastname}')">
                ${user.name} ${user.lastname}
            </div>
        `).join('');
    } catch (err) {
        console.error('Ошибка при поиске:', err);
    }
});

async function addToTeam(name, lastname) {
    try {
        const res = await fetch('/api/add-to-team', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name, lastname })
        });

        const result = await res.json();

        if (result.success) {
            alert('Пользователь добавлен');
            location.reload();
        } else {
            alert(result.message || 'Ошибка при добавлении');
        }
    } catch (err) {
        alert('Ошибка подключения к серверу');
        console.error(err);
    }
}
            document.getElementById('filterBy').addEventListener('change', function() {
                const value = this.value;
                let filteredMembers = [...teamMembers];
                
                if (value === 'low') {
                    filteredMembers = teamMembers.filter(m => m.tasks.length <= 2);
                } else if (value === 'medium') {
                    filteredMembers = teamMembers.filter(m => m.tasks.length > 2 && m.tasks.length <= 4);
                } else if (value === 'high') {
                    filteredMembers = teamMembers.filter(m => m.tasks.length > 4);
                }
                
                renderTeamMembers(filteredMembers);
            });
            
            document.getElementById('searchMember').addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                const filteredMembers = teamMembers.filter(m => 
                    m.name.toLowerCase().includes(searchTerm) || 
                    m.role.toLowerCase().includes(searchTerm)
                );
                renderTeamMembers(filteredMembers);
            });
        });

        function changeSection(section) {
            if (section === 'home') {
                window.location.href = '/';
                return;
            }

            currentSection = section;
            document.getElementById('breadcrumb').innerHTML = `
                <a href="/" class="breadcrumb-link">Моя страница</a> / ${getSectionName(section)}
            `;

            // Update active nav item
            document.querySelectorAll('.nav-item').forEach(item => {
                item.classList.remove('active');
            });
            event.currentTarget.classList.add('active');
        }
    </script>
</body>
</html>